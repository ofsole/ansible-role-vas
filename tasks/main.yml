---
# tasks file for ansible-role-vas

- name: get vas version
  shell: >
    test -f /opt/quest/bin/vastool && 
    /opt/quest/bin/vastool -v | 
    grep vastool | 
    awk '{print $4}'
  register: _vas_version
  ignore_errors: yes
  changed_when: false

- name: set vas version
  set_fact:
    vas_version: "{{ _vas_version.stdout }}"

- name: get vas domain
  shell: >
    test -f /opt/quest/bin/vastool && 
    /opt/quest/bin/vastool info domain
  register: _vas_domain
  ignore_errors: yes
  changed_when: false

- name: set vas domain
  set_fact:
    vas_domain: "{{ _vas_domain.stdout }}"

- name: get vas major version
  shell: >
    test -f /opt/quest/bin/vastool &&
    /opt/quest/bin/vastool -v | 
    grep  vastool | 
    awk '{print $4}' | 
    cut -c 1
  register: _vasmajversion
  changed_when: false

- name: set vas major version
  set_fact:
    vasmajversion: "{{ _vasmajversion }}"

#- name: debug value
#  debug: msg="{{ item + '-' + package_version }}"
#  with_items:
#    - vasclnt
#    - vasyp
#    - vasgp

- name: install vas package for redhat
  yum: name="{{ item + '-' + package_version if package_version else item}}" state=present
  when: ansible_os_family == 'RedHat'
  with_items:
    - vasclnt
    - vasyp
    - vasgp

- name: install vas package for suse
  zypper: name="{{ item + '-' + package_version if package_version else item}}" state=present
  when: ansible_os_family == 'Suse'
  with_items:
    - vasclnt
    - vasyp
    - vasgp

- name: install vas package for Ubuntu
  apt: name="{{ item + '-' + package_version if package_version else item}}" state=present
  when: ansible_os_family == 'Debian'
  with_items:
    - vasclnt
    - vasyp
    - vasgp

- name: vas.conf config
  template:
    dest: "{{vas_config_path}}"
    owner: "{{vas_config_owner}}"
    group: "{{vas_config_group}}"
    mode: "{{vas_config_mode}}}"
    src: 'vas.conf.j2'

- name: users.allow config
  template:
    dest: "{{vas_users_allow_path}}"
    src: 'users.allow.j2'
    owner: "{{vas_users_allow_owner}}"
    group: "{{vas_users_allow_group}}"
    mode: "{{vas_users_allow_mode}}"

- name: users.deny config
  template:
    dest: "{{vas_users_deny_path}}"
    src: 'users.deny.j2'
    owner: "{{vas_users_deny_owner}}"
    group: "{{vas_users_deny_group}}"
    mode: "{{vas_users_deny_mode}}"

- name: user-override config
  template:
    dest: "{{vas_user_override_path}}"
    src: 'user-override.j2'
    owner: "{{vas_user_override_owner}}"
    group: "{{vas_user_override_group}}"
    mode: "{{vas_user_override_mode}}"

- name: group-override config
  template:
    dest: "{{vas_group_override_path}}"
    src: 'group-override.j2'
    owner: "{{vas_group_override_owner}}"
    group: "{{vas_group_override_group}}"
    mode: "{{vas_group_override_mode}}"

- name: keytab manage
  copy:
    owner: "{{keytab_owner}}"
    group: "{{keytab_group}}"
    mode: "{{keytab_mode}}"
    src: "{{keytab_source}}"
    dest: "{{keytab_path}}"

- name: serviced vasd config
  service:
    name: 'vasd'
    enabled: yes
    state: started

- name: serviced vasypd config
  service:
    name: 'vasypd'
    enabled: yes
    state: started

- name: vas installing...
  shell: >
    "{{vastool_binary}}" -u "{{username}}" -k "{{keytab_path}}"
    -d3 join -f "{{workstation_flag}}" -c "{{computers_ou}}" 
    "{{user_search_path_parm}}" "{{group_search_path_parm}}" 
    "{{upm_search_path_parm}}" -n "{{vas_fqdn}}" 
    "{{s_opts}}" "{{realm}}" > "{{vasjoin_logfile}}" 2>&1 &&
    touch "{{once_file}}"
  args:
    executable: '/sbin:/bin:/usr/bin:/opt/quest/bin'
    creates: "{{once_file}}"

- name: symlink for vastool
  file:
    state: link
    src: "{{vastool_binary}}"
    dest: "{{symlink_vastool_binary_target}}"
  when: symlink_vastool_binary
